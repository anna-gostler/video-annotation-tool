{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  // enter -> move to next frame number but do not overwrite bbox if they exist (not [0000])\n  // tracker -> extend maxtracked, overwrite following bboxes\n  //'glue' to pointer\n  // x click on slider to select frame\n  // new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\n  // same width img and slider\n  //todo some issue at last frame / run tracker\n  // scale image / bbox by some factor\n  // send baseimgpath to python also\n  // server fails why? to many res??\n  // val - 1 does not reach 100%\n  //finally: upload to azure (install cv2)\n  //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      //this.getSliderWidth();\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        }); //document.addEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mouseup\") {\n        // todo as soon as trackerbtn unclicked\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n        //console.log(this.state.selectedFrameNumber)\n        //var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth;\n\n        this.props.setFrameNo(this.props.value); //run tracker changes this to maxtracked\n\n        this.setState({\n          offsetX: event.pageX - this.state.startPosX,\n          dragModeOn: false\n        });\n        console.log(this.state.offsetX); //document.removeEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mousemove\") {\n        // on move: register offset from start pos\n        // allow slide only to already tracked/manually marked frames\n        //convert framenumber to position on slider .. \n        // slider is either set manually or through pressing enter/tracking\n        // set to frame number\n        if (this.state.dragModeOn === true) {\n          //var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\n          console.log('sliderWidth ' + this.props.imagewidth);\n          var xPos = event.pageX;\n          var new_left = xPos - 100; // 100 is left of FrameArea\n\n          console.log('new_left? ' + new_left);\n          new_left = Math.max(this.props.min_value, new_left);\n          var newFrameNumber = Math.ceil(new_left / this.props.imagewidth * this.props.max_value);\n          newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked);\n          console.log(this.props.max_tracked);\n          console.log('newFrameNumber ' + newFrameNumber);\n          this.setState({\n            offsetX: xPos - this.state.startPosX,\n            selectedFrameNumber: newFrameNumber\n          });\n          console.log('startPosX ' + this.state.startPosX);\n          console.log('offsetx ' + this.state.offsetX);\n          this.props.setFrameNo(newFrameNumber);\n        }\n      }\n    };\n\n    console.log(this.props);\n    this.state = {\n      startPosX: 0,\n      offsetX: 0,\n      dragModeOn: false,\n      //sliderWidth: this.props.imagewidth,\n      sliderwidthset: false\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  componentDidUpdate() {\n    if (this.state.sliderwidthset === false) {\n      this.getSliderWidth();\n    }\n  }\n\n  getSliderWidth() {\n    /*\r\n    this.setState({\r\n        sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width, \r\n        sliderwidthset: true,\r\n    });*/\n  }\n\n  render() {\n    console.log('left of thumb  ' + (this.state.selectedFrameNumber - 1) * (this.props.imagewidth / this.props.num_imgs));\n    console.log('left of thumb selectedFrameNumber ' + this.state.selectedFrameNumber);\n    console.log('left of thumb imagewidth ' + this.props.imagewidth);\n    return React.createElement(\"div\", {\n      style: {\n        width: this.props.imagewidth,\n        backgroundColor: this.props.colorPalette.LightGray,\n        height: \"20px\",\n        borderRadius: \"0px\" //display: \"inline-block\",\n\n      },\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.props.max_tracked - 1 + '%',\n        backgroundColor: \"#A9A9A9\",\n        height: \"20px\",\n        top: \"0px\",\n        position: \"relative\"\n      },\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        backgroundColor: this.props.colorPalette.RoyalBlue,\n        width: (this.props.value - 1) / this.props.imagewidth * 100 + \"%\",\n        height: \"20px\",\n        borderRadius: \"0px\",\n        position: \"relative\",\n        top: \"-20px\"\n      },\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: {\n        //left: (this.props.value - 1) * (this.props.imagewidth/this.props.num_imgs), \n        left: (this.props.value - 1) / this.props.imagewidth,\n        //left: this.state.left + this.state.offsetX,\n        backgroundColor: this.props.colorPalette.LightSalmon\n      },\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        align: \"center\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        top: \"25px\",\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","setFrameNo","value","offsetX","state","imagewidth","xPos","new_left","Math","max","min_value","newFrameNumber","ceil","max_value","min","max_tracked","selectedFrameNumber","sliderwidthset","componentDidMount","findDOMNode","addEventListener","document","componentDidUpdate","getSliderWidth","render","num_imgs","width","backgroundColor","colorPalette","LightGray","height","borderRadius","top","position","RoyalBlue","left","LightSalmon","align","textAlign","verticalAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n\r\n    // enter -> move to next frame number but do not overwrite bbox if they exist (not [0000])\r\n    // tracker -> extend maxtracked, overwrite following bboxes\r\n\r\n    //'glue' to pointer\r\n    // x click on slider to select frame\r\n    // new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\r\n    // same width img and slider\r\n\r\n    //todo some issue at last frame / run tracker\r\n    // scale image / bbox by some factor\r\n    // send baseimgpath to python also\r\n    // server fails why? to many res??\r\n    // val - 1 does not reach 100%\r\n\r\n    //finally: upload to azure (install cv2)\r\n\r\n    //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      console.log(this.props)\r\n      this.state = {\r\n        startPosX: 0, \r\n        offsetX: 0,\r\n        dragModeOn: false,\r\n        //sliderWidth: this.props.imagewidth,\r\n        sliderwidthset: false,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.state.sliderwidthset === false){\r\n            this.getSliderWidth();\r\n        }\r\n    }\r\n\r\n    getSliderWidth(){\r\n        /*\r\n        this.setState({\r\n            sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width, \r\n            sliderwidthset: true,\r\n        });*/\r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n        //this.getSliderWidth();\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n          //document.addEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mouseup\"){ // todo as soon as trackerbtn unclicked\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            //console.log(this.state.selectedFrameNumber)\r\n            //var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth;\r\n            this.props.setFrameNo(this.props.value) //run tracker changes this to maxtracked\r\n            this.setState({\r\n                offsetX: event.pageX - this.state.startPosX,\r\n                dragModeOn: false,\r\n              });\r\n              console.log(this.state.offsetX)\r\n              //document.removeEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            //convert framenumber to position on slider .. \r\n            // slider is either set manually or through pressing enter/tracking\r\n            // set to frame number\r\n\r\n            if (this.state.dragModeOn === true){\r\n\r\n                //var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n                console.log('sliderWidth ' + this.props.imagewidth)\r\n\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                console.log('new_left? ' + new_left)\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n\r\n                var newFrameNumber = Math.ceil((new_left/this.props.imagewidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n                console.log(this.props.max_tracked)\r\n                console.log('newFrameNumber ' + newFrameNumber)\r\n                this.setState({\r\n                    offsetX:  xPos - this.state.startPosX,\r\n                    selectedFrameNumber: newFrameNumber,\r\n                }); \r\n                console.log('startPosX ' + this.state.startPosX)\r\n                console.log('offsetx ' + this.state.offsetX)\r\n                this.props.setFrameNo(newFrameNumber)\r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n        console.log('left of thumb  '+ (this.state.selectedFrameNumber-1) * (this.props.imagewidth/this.props.num_imgs))\r\n\r\n        console.log('left of thumb selectedFrameNumber '+ (this.state.selectedFrameNumber))\r\n        console.log('left of thumb imagewidth '+ this.props.imagewidth)\r\n\r\n      return(\r\n        <div style = {{\r\n            width: this.props.imagewidth,\r\n            backgroundColor: this.props.colorPalette.LightGray,\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            //display: \"inline-block\",\r\n        }} \r\n        className=\"backgroundSlider\">\r\n        <div style = {{\r\n            width: (this.props.max_tracked - 1) + '%', \r\n            backgroundColor:\"#A9A9A9\", \r\n            height:\"20px\", \r\n            top: \"0px\", \r\n            position: \"relative\"}} \r\n            className=\"trackedSlider\"/>\r\n            <div style = {{\r\n            backgroundColor: this.props.colorPalette.RoyalBlue,\r\n            width: ((this.props.value - 1)/this.props.imagewidth)*100 +\"%\",\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            position: \"relative\",\r\n            top: \"-20px\",}} \r\n            className=\"selectedSlider\"/>\r\n\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {{\r\n            //left: (this.props.value - 1) * (this.props.imagewidth/this.props.num_imgs), \r\n            left: ((this.props.value - 1)/this.props.imagewidth),\r\n            //left: this.state.left + this.state.offsetX,\r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        }\r\n        } onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p style = {{\r\n                align:\"center\", \r\n                textAlign: \"center\", \r\n                verticalAlign: \"middle\",\r\n                top: \"25px\", \r\n                position: \"relative\",\r\n                }}>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}