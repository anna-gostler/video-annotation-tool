{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n      } else if (event.type === \"mouseup\") {\n        console.log('slider mouseup'); //update frameno depending on offset\n\n        var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n        var one_slider_unit = sliderWidth / 100;\n        this.thumbStyle.left / this.props.max_value; //convert pixel offset to slider value\n        //this.props.value\n        //this.props.setFrameNo(frameno)\n      } else if (event.type === \"mousemove\") {\n        //on move: register offset from start pos\n        // set thumb position\n        //if (this.state.dragModeOn === true){\n        //var sliderX = ReactDOM.findDOMNode(this).offsetLeft;//.getBoundingClientRect();\n        //console.log(rect.top, rect.right, rect.bottom, rect.left);\n        var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth;\n        var xPos = event.pageX;\n        var new_left = xPos - 100;\n        new_left = Math.max(0, new_left);\n        new_left = Math.min(sliderWidth - 25, new_left);\n        this.setState({\n          offsetX: this.state.startPosX - this.state.xPos,\n          thumbStyle: {\n            left: new_left // 100 is left of FrameArea\n\n          }\n        }); //}\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      selectedStyle: {\n        backgroundColor: \"blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      bgStyle: {\n        backgroundColor: \"#dedede\",\n        // light gray\n        width: \"100%\",\n        height: \"20px\"\n      },\n      trackedStyle: {\n        backgroundColor: \"light-blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      thumbStyle: {//left: \"0px\",\n      }\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); ///ReactDOM.findDOMNode(this).addEventListener('mousemove', this.handleSliderInput); \n\n    document.addEventListener('mousemove', this.handleSliderInput);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      className: \"slidecontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.frameNumber)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","sliderWidth","findDOMNode","offsetWidth","one_slider_unit","thumbStyle","left","max_value","xPos","new_left","Math","max","min","offsetX","state","undefined","selectedStyle","backgroundColor","width","height","bgStyle","trackedStyle","componentDidMount","addEventListener","document","render","frameNumber"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AAEjC;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoCnBC,iBApCmB,GAoCEC,KAAD,IAAW;AAE3B,UAAIA,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACF,aAAKC,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAEL,KAAK,CAACM,KADL;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAAd;AAID,OAND,MAMO,IAAIP,KAAK,CAACC,IAAN,KAAe,SAAnB,EAA6B;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADgC,CAGhC;;AACA,YAAIK,WAAW,GAAId,QAAQ,CAACe,WAAT,CAAqB,IAArB,EAA2BC,WAA3B,GAAyC,EAA5D;AACA,YAAIC,eAAe,GAAIH,WAAW,GAAC,GAAnC;AAEA,aAAKI,UAAL,CAAgBC,IAAhB,GAAuB,KAAKf,KAAL,CAAWgB,SAAlC,CAPgC,CAShC;AACA;AACA;AAEH,OAbM,MAaA,IAAId,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAClC;AACA;AAEA;AAEI;AACA;AACA,YAAIO,WAAW,GAAId,QAAQ,CAACe,WAAT,CAAqB,IAArB,EAA2BC,WAA9C;AACA,YAAIK,IAAI,GAAGf,KAAK,CAACM,KAAjB;AACA,YAAIU,QAAQ,GAAGD,IAAI,GAAG,GAAtB;AACAC,QAAAA,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,QAAZ,CAAX;AACAA,QAAAA,QAAQ,GAAGC,IAAI,CAACE,GAAL,CAASX,WAAW,GAAC,EAArB,EAAyBQ,QAAzB,CAAX;AAEA,aAAKZ,QAAL,CAAc;AACVgB,UAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWhB,SAAX,GAAuB,KAAKgB,KAAL,CAAWN,IADjC;AAGVH,UAAAA,UAAU,EAAE;AACRC,YAAAA,IAAI,EAAEG,QADE,CACQ;;AADR;AAHF,SAAd,EAd8B,CAqBlC;AACH;AACF,KAhFgB;;AAEjB,SAAKK,KAAL,GAAa;AACXhB,MAAAA,SAAS,EAAEiB,SADA;AAEXF,MAAAA,OAAO,EAAEE,SAFE;AAGXf,MAAAA,UAAU,EAAE,KAHD;AAIXgB,MAAAA,aAAa,EAAE;AACbC,QAAAA,eAAe,EAAE,MADJ;AAEbC,QAAAA,KAAK,EAAE,IAFM;AAGbC,QAAAA,MAAM,EAAE;AAHK,OAJJ;AASXC,MAAAA,OAAO,EAAE;AACPH,QAAAA,eAAe,EAAE,SADV;AACqB;AAC5BC,QAAAA,KAAK,EAAE,MAFA;AAGPC,QAAAA,MAAM,EAAE;AAHD,OATE;AAcXE,MAAAA,YAAY,EAAE;AACZJ,QAAAA,eAAe,EAAE,YADL;AAEZC,QAAAA,KAAK,EAAE,IAFK;AAGZC,QAAAA,MAAM,EAAE;AAHI,OAdH;AAmBXd,MAAAA,UAAU,EAAE,CACR;AADQ;AAnBD,KAAb;AAuBD;;AAGDiB,EAAAA,iBAAiB,GAAG;AAEhBnC,IAAAA,QAAQ,CAACe,WAAT,CAAqB,IAArB,EAA2BqB,gBAA3B,CAA4C,WAA5C,EAAyD,KAAK/B,iBAA9D,EAFgB,CAGhB;;AACAgC,IAAAA,QAAQ,CAACD,gBAAT,CAA0B,WAA1B,EAAuC,KAAK/B,iBAA5C;AAEH;;AAgDDiC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAI,KAAKX,KAAL,CAAWM,OAAzB;AAAkC,MAAA,SAAS,EAAC,gBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,SAAS,EAAC,OAA1B;AAAkC,MAAA,KAAK,EAAI,KAAKN,KAAL,CAAWT,UAAtD;AAAkE,MAAA,WAAW,EAAI,KAAKd,KAAL,CAAWC,iBAA5F;AAA+G,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAWC,iBAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKsB,KAAL,CAAWY,WAAf,CADF,CADF,CADF;AAOD;;AA9FgC;;AAiGnC,eAAetC,MAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        selectedStyle: {\r\n          backgroundColor: \"blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: \"#dedede\", // light gray\r\n          width: \"100%\",\r\n          height: \"20px\",\r\n        },\r\n        trackedStyle: {\r\n          backgroundColor: \"light-blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        thumbStyle: {\r\n            //left: \"0px\",\r\n        },\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount() {\r\n  \r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        ///ReactDOM.findDOMNode(this).addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n\r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n        } else if (event.type === \"mouseup\"){\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n            var one_slider_unit = (sliderWidth/100);\r\n\r\n            this.thumbStyle.left / this.props.max_value\r\n\r\n            //convert pixel offset to slider value\r\n            //this.props.value\r\n            //this.props.setFrameNo(frameno)\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            //on move: register offset from start pos\r\n            // set thumb position\r\n\r\n            //if (this.state.dragModeOn === true){\r\n\r\n                //var sliderX = ReactDOM.findDOMNode(this).offsetLeft;//.getBoundingClientRect();\r\n                //console.log(rect.top, rect.right, rect.bottom, rect.left);\r\n                var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth;\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100;\r\n                new_left = Math.max(0, new_left)\r\n                new_left = Math.min(sliderWidth-25, new_left)\r\n\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n\r\n                    thumbStyle: {\r\n                        left: new_left, // 100 is left of FrameArea\r\n                    },\r\n                  });\r\n            //}\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle} className=\"slidecontainer\">\r\n          <div id=\"Thumb\" className=\"Thumb\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p>{this.state.frameNumber}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}