{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //todo\n  //  (general: skip over frames /wo move)\n  //implement left right arrows to slide\n  //'glue' to pointer\n  // lighter blue\n  // click on runtracker update pos -> change slider with and hand as prop\n  // click on slider to select\n  // runtracker nice action and wait animation\n  // one should be at left-most pos\n  //todo: bug box rendered at mousepos\n  //bbox glued to pointer\n  //when bbox move image jumps back\n  //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      //TODO do not call all the time ...\n      this.setState({\n        sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width - 25\n      });\n\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        }); //document.addEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mouseup\") {\n        // todo as soon as trackerbtn unclicked\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n        //console.log(this.state.selectedFrameNumber)\n\n        var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n        this.props.setFrameNo(this.props.value); //run tracker changes this to maxtracked\n\n        this.setState({\n          offsetX: this.state.startPosX - this.state.xPos,\n          dragModeOn: false\n          /*\r\n          thumbStyle: {\r\n              left: this.props.value * (sliderWidth/100),   \r\n              backgroundColor: this.props.colorPalette.LightSalmon,\r\n          },*/\n\n          /*\r\n          selectedStyle: {\r\n              backgroundColor: \"light-blue\",\r\n              width: this.props.value +\"%\",\r\n              height: \"20px\",\r\n              borderRadius: \"0px\",\r\n              position: \"relative\",\r\n              top: \"-20px\",\r\n              },*/\n\n        }); //document.removeEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mousemove\") {\n        // on move: register offset from start pos\n        // allow slide only to already tracked/manually marked frames\n        //convert framenumber to position on slider .. \n        // slider is either set manually or through pressing enter/tracking\n        // set to frame number\n        if (this.state.dragModeOn === true) {\n          var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n          var xPos = event.pageX;\n          var new_left = xPos - 100; // 100 is left of FrameArea\n\n          new_left = Math.max(this.props.min_value, new_left);\n          var newFrameNumber = Math.ceil(new_left / sliderWidth * this.props.max_value);\n          newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked);\n          console.log(this.props.max_tracked);\n          new_left = Math.min(this.props.max_tracked * (sliderWidth / 100), new_left);\n          this.setState({\n            offsetX: this.state.startPosX - this.state.xPos,\n\n            /*\r\n            thumbStyle: {\r\n                left: new_left,   // this.props.value * (sliderWidth/100)\r\n                backgroundColor: this.props.colorPalette.LightSalmon,\r\n            },*/\n            selectedFrameNumber: newFrameNumber\n            /*selectedStyle: {\r\n                backgroundColor: \"light-blue\",\r\n                width: newFrameNumber +\"%\",\r\n                height: \"20px\",\r\n                borderRadius: \"0px\",\r\n                position: \"relative\",\r\n                top: \"-20px\",\r\n                },*/\n\n          });\n          this.props.setFrameNo(newFrameNumber);\n        }\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      sliderWidth: \"100\",\n      //selectedFrameNumber: this.props.value, \n\n      /*selectedStyle: {\r\n        backgroundColor: this.props.colorPalette.RoyalBlue,\r\n        width: this.props.value +\"%\",\r\n        height: \"20px\",\r\n        borderRadius: \"0px\",\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n      },*/\n      bgStyle: {\n        backgroundColor: this.props.colorPalette.LightGray,\n        // light gray\n        height: \"20px\",\n        borderRadius: \"0px\",\n        display: \"inline-block\"\n      }\n      /*\r\n      thumbStyle: {\r\n          left: \"0px\",\r\n          backgroundColor: this.props.colorPalette.LightSalmon,\r\n      },*/\n\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  componentDidUpdate() {\n    this.getSliderWidth();\n  }\n\n  getSliderWidth() {\n    this.setState({\n      sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width - 25\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.props.max_tracked + '%',\n        backgroundColor: \"#A9A9A9\",\n        height: \"20px\",\n        top: \"0px\",\n        position: \"relative\"\n      },\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        backgroundColor: this.props.colorPalette.RoyalBlue,\n        width: this.props.value + \"%\",\n        height: \"20px\",\n        borderRadius: \"0px\",\n        position: \"relative\",\n        top: \"-20px\"\n      },\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: {\n        left: this.props.value * (this.state.sliderWidth / 100),\n        backgroundColor: this.props.colorPalette.LightSalmon\n      },\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        align: \"center\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","setState","sliderWidth","findDOMNode","getBoundingClientRect","width","type","console","log","startPosX","pageX","dragModeOn","offsetWidth","setFrameNo","value","offsetX","state","xPos","new_left","Math","max","min_value","newFrameNumber","ceil","max_value","min","max_tracked","selectedFrameNumber","undefined","bgStyle","backgroundColor","colorPalette","LightGray","height","borderRadius","display","componentDidMount","addEventListener","document","componentDidUpdate","getSliderWidth","render","top","position","RoyalBlue","left","LightSalmon","align","textAlign","verticalAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //todo\r\n    //  (general: skip over frames /wo move)\r\n    //implement left right arrows to slide\r\n    //'glue' to pointer\r\n    // lighter blue\r\n    // click on runtracker update pos -> change slider with and hand as prop\r\n    // click on slider to select\r\n    // runtracker nice action and wait animation\r\n    // one should be at left-most pos\r\n\r\n\r\n    //todo: bug box rendered at mousepos\r\n    //bbox glued to pointer\r\n    //when bbox move image jumps back\r\n\r\n    //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        sliderWidth: \"100\",\r\n        //selectedFrameNumber: this.props.value, \r\n        /*selectedStyle: {\r\n          backgroundColor: this.props.colorPalette.RoyalBlue,\r\n          width: this.props.value +\"%\",\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n          position: \"relative\",\r\n          top: \"-20px\",\r\n        },*/\r\n        bgStyle: {\r\n          backgroundColor: this.props.colorPalette.LightGray, // light gray\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n          display: \"inline-block\",\r\n        },\r\n        /*\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        },*/\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.getSliderWidth();\r\n    }\r\n\r\n    getSliderWidth(){\r\n        this.setState({\r\n            sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width - 25, \r\n        });\r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n        //TODO do not call all the time ...\r\n        this.setState({ \r\n            sliderWidth: ReactDOM.findDOMNode(this).getBoundingClientRect().width - 25, \r\n        });\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n          //document.addEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mouseup\"){ // todo as soon as trackerbtn unclicked\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            //console.log(this.state.selectedFrameNumber)\r\n            var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n            this.props.setFrameNo(this.props.value) //run tracker changes this to maxtracked\r\n            this.setState({\r\n                offsetX: this.state.startPosX - this.state.xPos,\r\n                dragModeOn: false,\r\n                /*\r\n                thumbStyle: {\r\n                    left: this.props.value * (sliderWidth/100),   \r\n                    backgroundColor: this.props.colorPalette.LightSalmon,\r\n                },*/\r\n                /*\r\n                selectedStyle: {\r\n                    backgroundColor: \"light-blue\",\r\n                    width: this.props.value +\"%\",\r\n                    height: \"20px\",\r\n                    borderRadius: \"0px\",\r\n                    position: \"relative\",\r\n                    top: \"-20px\",\r\n                    },*/\r\n              });\r\n              //document.removeEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            //convert framenumber to position on slider .. \r\n            // slider is either set manually or through pressing enter/tracking\r\n            // set to frame number\r\n\r\n            if (this.state.dragModeOn === true){\r\n                var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n                var newFrameNumber = Math.ceil((new_left/sliderWidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n                console.log(this.props.max_tracked)\r\n                new_left = Math.min(this.props.max_tracked * (sliderWidth/100), new_left)\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n                    /*\r\n                    thumbStyle: {\r\n                        left: new_left,   // this.props.value * (sliderWidth/100)\r\n                        backgroundColor: this.props.colorPalette.LightSalmon,\r\n                    },*/\r\n                    selectedFrameNumber: newFrameNumber,\r\n                    /*selectedStyle: {\r\n                        backgroundColor: \"light-blue\",\r\n                        width: newFrameNumber +\"%\",\r\n                        height: \"20px\",\r\n                        borderRadius: \"0px\",\r\n                        position: \"relative\",\r\n                        top: \"-20px\",\r\n                        },*/\r\n                    }); \r\n                    this.props.setFrameNo(newFrameNumber)\r\n                \r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle} className=\"backgroundSlider\">\r\n        <div style = {{\r\n            width: this.props.max_tracked + '%', \r\n            backgroundColor:\"#A9A9A9\", \r\n            height:\"20px\", \r\n            top: \"0px\", \r\n            position: \"relative\"}} \r\n            className=\"trackedSlider\"/>\r\n            <div style = {{\r\n            backgroundColor: this.props.colorPalette.RoyalBlue,\r\n            width: this.props.value +\"%\",\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            position: \"relative\",\r\n            top: \"-20px\",}} \r\n            className=\"selectedSlider\"/>\r\n\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {{\r\n            left: this.props.value * (this.state.sliderWidth/100),\r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        }\r\n        } onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p style = {{align:\"center\", textAlign: \"center\", verticalAlign: \"middle\",}}>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}