{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  // enter -> move to next frame number but do not overwrite bboxes if they exist (not [0000])\n  // tracker -> extend maxtracked, overwrite following bboxes\n  // new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\n  // scale image / bbox by some factor\n  // add explanation bubbles (select init bb, enter, tracker btn-run until fai, correct, vid source)\n  //finally: upload to azure (install cv2)\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n      } else if (event.type === \"mouseup\") {\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n\n        this.props.setFrameNo(this.props.value); //run tracker changes this to maxtracked\n\n        this.setState({\n          offsetX: event.pageX - this.state.startPosX,\n          dragModeOn: false\n        });\n      } else if (event.type === \"mousemove\") {\n        // on move: register offset from start pos\n        // allow slide only to already tracked/manually marked frames\n        //convert framenumber to position on slider .. \n        // slider is either set manually or through pressing enter/tracking\n        // set to frame number\n        if (this.state.dragModeOn === true) {\n          var xPos = event.pageX;\n          var new_left = xPos - 100; // 100 is left of FrameArea\n\n          new_left = Math.max(this.props.min_value, new_left);\n          var newFrameNumber = Math.ceil(new_left / this.props.imagewidth * this.props.max_value);\n          newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked);\n          this.setState({\n            offsetX: xPos - this.state.startPosX,\n            selectedFrameNumber: newFrameNumber\n          });\n          this.props.setFrameNo(newFrameNumber);\n        }\n      }\n    };\n\n    console.log(this.props);\n    this.state = {\n      startPosX: 0,\n      offsetX: 0,\n      dragModeOn: false\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: this.props.imagewidth,\n        backgroundColor: this.props.colorPalette.LightGray,\n        height: \"20px\",\n        borderRadius: \"0px\" //display: \"inline-block\",\n\n      },\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // width\n        // ex: 25 out of 50 frames tracked 25/50 = 0.5\n        // in perc: 0.5*100= 50%\n        width: this.props.max_tracked / this.props.num_imgs * 100 + '%',\n        backgroundColor: \"#A9A9A9\",\n        height: \"20px\",\n        top: \"0px\",\n        position: \"relative\"\n      },\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        backgroundColor: this.props.colorPalette.RoyalBlue,\n        height: \"20px\",\n        borderRadius: \"0px\",\n        position: \"relative\",\n        top: \"-20px\",\n        // width\n        // ex: 25 out of 50 frames 25/50 = 0.5\n        // in perc: 0.5*100= 50%\n        width: this.props.value / this.props.num_imgs * 100 + \"%\"\n      },\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: {\n        left: (this.props.value - 1) * (this.props.imagewidth / this.props.num_imgs),\n        backgroundColor: this.props.colorPalette.LightSalmon\n      },\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        align: \"center\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        top: \"25px\",\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","setFrameNo","value","offsetX","state","xPos","new_left","Math","max","min_value","newFrameNumber","ceil","imagewidth","max_value","min","max_tracked","selectedFrameNumber","componentDidMount","findDOMNode","addEventListener","document","render","width","backgroundColor","colorPalette","LightGray","height","borderRadius","num_imgs","top","position","RoyalBlue","left","LightSalmon","align","textAlign","verticalAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n\r\n    // enter -> move to next frame number but do not overwrite bboxes if they exist (not [0000])\r\n    // tracker -> extend maxtracked, overwrite following bboxes\r\n\r\n    // new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\r\n\r\n    // scale image / bbox by some factor\r\n\r\n    // add explanation bubbles (select init bb, enter, tracker btn-run until fai, correct, vid source)\r\n\r\n    //finally: upload to azure (install cv2)\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      console.log(this.props)\r\n      this.state = {\r\n        startPosX: 0, \r\n        offsetX: 0,\r\n        dragModeOn: false,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n\r\n        } else if (event.type === \"mouseup\"){ \r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            this.props.setFrameNo(this.props.value) //run tracker changes this to maxtracked\r\n            this.setState({\r\n                offsetX: event.pageX - this.state.startPosX,\r\n                dragModeOn: false,\r\n              });\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            //convert framenumber to position on slider .. \r\n            // slider is either set manually or through pressing enter/tracking\r\n            // set to frame number\r\n\r\n            if (this.state.dragModeOn === true){\r\n\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n                var newFrameNumber = Math.ceil((new_left/this.props.imagewidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n\r\n                this.setState({\r\n                    offsetX:  xPos - this.state.startPosX,\r\n                    selectedFrameNumber: newFrameNumber,\r\n                }); \r\n                this.props.setFrameNo(newFrameNumber)\r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n\r\n      return(\r\n        <div style = {{\r\n            width: this.props.imagewidth,\r\n            backgroundColor: this.props.colorPalette.LightGray,\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            //display: \"inline-block\",\r\n        }} \r\n        className=\"backgroundSlider\">\r\n\r\n        <div style = {{\r\n            // width\r\n            // ex: 25 out of 50 frames tracked 25/50 = 0.5\r\n            // in perc: 0.5*100= 50%\r\n            width: ((this.props.max_tracked)/this.props.num_imgs)*100 + '%', \r\n            backgroundColor:\"#A9A9A9\", \r\n            height:\"20px\", \r\n            top: \"0px\", \r\n            position: \"relative\"}} \r\n        className=\"trackedSlider\"/>\r\n            \r\n        <div style = {{\r\n            backgroundColor: this.props.colorPalette.RoyalBlue,\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            position: \"relative\",\r\n            top: \"-20px\",\r\n            // width\r\n            // ex: 25 out of 50 frames 25/50 = 0.5\r\n            // in perc: 0.5*100= 50%\r\n            width: ((this.props.value)/this.props.num_imgs)*100 +\"%\",   \r\n            }} \r\n        className=\"selectedSlider\"/>\r\n\r\n\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {{\r\n            left: (this.props.value - 1) * (this.props.imagewidth/this.props.num_imgs), \r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        }\r\n        } onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p style = {{\r\n                align:\"center\", \r\n                textAlign: \"center\", \r\n                verticalAlign: \"middle\",\r\n                top: \"25px\", \r\n                position: \"relative\",\r\n                }}>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}