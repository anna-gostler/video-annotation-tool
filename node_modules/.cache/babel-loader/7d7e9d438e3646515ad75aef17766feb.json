{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //todo\n  // max selectable val: max tracked (general: skip over frames /wo move)\n  // color selected bar, tracked/marked bar\n  // enter -> move slider\n  //implement left right arrows to slide\n  //'glue' to pointer\n  //todo: bug box rendered at mousepos\n  //bbox glued to pointer\n  //when bbox move image jumps back\n  //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        }); //document.addEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mouseup\") {\n        // todo as soon as trackerbtn unclicked\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n        //console.log(this.state.selectedFrameNumber)\n\n        var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n        this.props.setFrameNo(this.props.value); //run tracker changes this to maxtracked\n\n        this.setState({\n          offsetX: this.state.startPosX - this.state.xPos,\n          dragModeOn: false,\n          thumbStyle: {\n            left: this.props.value * (sliderWidth / 100),\n            backgroundColor: this.props.colorPalette.LightSalmon\n          },\n          selectedStyle: {\n            backgroundColor: \"light-blue\",\n            width: this.props.value + \"%\",\n            height: \"20px\",\n            borderRadius: \"0px\",\n            position: \"relative\",\n            top: \"-20px\"\n          }\n        }); //document.removeEventListener('mousemove', this.handleSliderInput); \n      } else if (event.type === \"mousemove\") {\n        // on move: register offset from start pos\n        // allow slide only to already tracked/manually marked frames\n        if (this.state.dragModeOn === true) {\n          var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n          var xPos = event.pageX;\n          var new_left = xPos - 100; // 100 is left of FrameArea\n\n          new_left = Math.max(this.props.min_value, new_left);\n          var newFrameNumber = Math.ceil(new_left / sliderWidth * this.props.max_value);\n          newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked);\n          console.log(this.props.max_tracked);\n          new_left = Math.min(this.props.max_tracked * (sliderWidth / 100), new_left);\n          this.setState({\n            offsetX: this.state.startPosX - this.state.xPos,\n            thumbStyle: {\n              left: new_left,\n              backgroundColor: this.props.colorPalette.LightSalmon\n            },\n            selectedFrameNumber: newFrameNumber,\n            selectedStyle: {\n              backgroundColor: \"light-blue\",\n              width: newFrameNumber + \"%\",\n              height: \"20px\",\n              borderRadius: \"0px\",\n              position: \"relative\",\n              top: \"-20px\"\n            }\n          });\n          this.props.setFrameNo(newFrameNumber);\n        }\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      //selectedFrameNumber: this.props.value, \n      selectedStyle: {\n        backgroundColor: this.props.colorPalette.RoyalBlue,\n        width: this.props.value + \"%\",\n        height: \"20px\",\n        borderRadius: \"0px\",\n        position: \"relative\",\n        top: \"-20px\"\n      },\n      bgStyle: {\n        backgroundColor: this.props.colorPalette.LightGray,\n        // light gray\n        height: \"20px\",\n        borderRadius: \"0px\"\n      },\n      thumbStyle: {\n        left: \"0px\",\n        backgroundColor: this.props.colorPalette.LightSalmon\n      }\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.props.max_tracked + '%',\n        backgroundColor: this.props.colorPalette.BleuDeFrance,\n        height: \"20px\",\n        top: \"0px\",\n        position: \"relative\"\n      },\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: this.state.selectedStyle,\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        align: \"center\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","sliderWidth","findDOMNode","offsetWidth","setFrameNo","value","offsetX","state","xPos","thumbStyle","left","backgroundColor","colorPalette","LightSalmon","selectedStyle","width","height","borderRadius","position","top","new_left","Math","max","min_value","newFrameNumber","ceil","max_value","min","max_tracked","selectedFrameNumber","undefined","RoyalBlue","bgStyle","LightGray","componentDidMount","addEventListener","document","render","BleuDeFrance","align","textAlign","verticalAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //todo\r\n    // max selectable val: max tracked (general: skip over frames /wo move)\r\n    // color selected bar, tracked/marked bar\r\n    // enter -> move slider\r\n    //implement left right arrows to slide\r\n    //'glue' to pointer\r\n\r\n    //todo: bug box rendered at mousepos\r\n    //bbox glued to pointer\r\n    //when bbox move image jumps back\r\n\r\n    //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        //selectedFrameNumber: this.props.value, \r\n        selectedStyle: {\r\n          backgroundColor: this.props.colorPalette.RoyalBlue,\r\n          width: this.props.value +\"%\",\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n          position: \"relative\",\r\n          top: \"-20px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: this.props.colorPalette.LightGray, // light gray\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n        },\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        },\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n          //document.addEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mouseup\"){ // todo as soon as trackerbtn unclicked\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            //console.log(this.state.selectedFrameNumber)\r\n            var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n            this.props.setFrameNo(this.props.value) //run tracker changes this to maxtracked\r\n            this.setState({\r\n                offsetX: this.state.startPosX - this.state.xPos,\r\n                dragModeOn: false,\r\n                thumbStyle: {\r\n                    left: this.props.value * (sliderWidth/100),   \r\n                    backgroundColor: this.props.colorPalette.LightSalmon,\r\n                },\r\n                selectedStyle: {\r\n                    backgroundColor: \"light-blue\",\r\n                    width: this.props.value +\"%\",\r\n                    height: \"20px\",\r\n                    borderRadius: \"0px\",\r\n                    position: \"relative\",\r\n                    top: \"-20px\",\r\n                    },\r\n              });\r\n              //document.removeEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            if (this.state.dragModeOn === true){\r\n                var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n                var newFrameNumber = Math.ceil((new_left/sliderWidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n                console.log(this.props.max_tracked)\r\n                new_left = Math.min(this.props.max_tracked * (sliderWidth/100), new_left)\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n                    thumbStyle: {\r\n                        left: new_left,   \r\n                        backgroundColor: this.props.colorPalette.LightSalmon,\r\n                    },\r\n                    selectedFrameNumber: newFrameNumber,\r\n                    selectedStyle: {\r\n                        backgroundColor: \"light-blue\",\r\n                        width: newFrameNumber +\"%\",\r\n                        height: \"20px\",\r\n                        borderRadius: \"0px\",\r\n                        position: \"relative\",\r\n                        top: \"-20px\",\r\n                        },\r\n                    }); \r\n                    this.props.setFrameNo(newFrameNumber)\r\n                \r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle} className=\"backgroundSlider\">\r\n        <div style = {{width: this.props.max_tracked + '%', backgroundColor:this.props.colorPalette.BleuDeFrance, height:\"20px\", top: \"0px\", position: \"relative\"}} className=\"trackedSlider\"/>\r\n        <div style = {this.state.selectedStyle} className=\"selectedSlider\"/>\r\n\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p style = {{align:\"center\", textAlign: \"center\", verticalAlign: \"middle\",}}>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}