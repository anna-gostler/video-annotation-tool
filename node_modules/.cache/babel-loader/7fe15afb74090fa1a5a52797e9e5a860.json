{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import ReactDOM from'react-dom';var Slider=/*#__PURE__*/function(_React$Component){_inherits(Slider,_React$Component);// enter -> move to next frame number but do not overwrite bboxes if they exist (not [0000])\n// tracker -> extend maxtracked, overwrite following bboxes\n// new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\n// scale image / bbox by some factor\n// add explanation bubbles (tracker btn-run until fail, correct bbox, vid source, tracking in progress)\n//finally: upload to azure (install cv2)\nfunction Slider(props){var _this;_classCallCheck(this,Slider);_this=_possibleConstructorReturn(this,_getPrototypeOf(Slider).call(this,props));_this.handleSliderInput=function(event){if(event.type===\"mousedown\"){console.log('slider mousedown');_this.setState({startPosX:event.pageX,dragModeOn:true});}else if(event.type===\"mouseup\"){console.log('slider mouseup');//update frameno depending on offset\n//convert pixel offset to slider value\n_this.props.setFrameNo(_this.props.value);//run tracker changes this to maxtracked\n_this.setState({offsetX:event.pageX-_this.state.startPosX,dragModeOn:false});}else if(event.type===\"mousemove\"){// on move: register offset from start pos\n// allow slide only to already tracked/manually marked frames\n//convert framenumber to position on slider .. \n// slider is either set manually or through pressing enter/tracking\n// set to frame number\nif(_this.state.dragModeOn===true){var xPos=event.pageX;var new_left=xPos-100;// 100 is left of FrameArea\nnew_left=Math.max(_this.props.min_value,new_left);var newFrameNumber=Math.ceil(new_left/_this.props.imagewidth*_this.props.max_value);newFrameNumber=Math.min(newFrameNumber,_this.props.max_tracked);_this.setState({offsetX:xPos-_this.state.startPosX,selectedFrameNumber:newFrameNumber});_this.props.setFrameNo(newFrameNumber);}}};console.log(_this.props);_this.state={startPosX:0,offsetX:0,dragModeOn:false};return _this;}_createClass(Slider,[{key:\"componentDidMount\",value:function componentDidMount(){ReactDOM.findDOMNode(this).addEventListener('mousedown',this.handleSliderInput);document.addEventListener('mousemove',this.handleSliderInput);document.addEventListener('mouseup',this.handleSliderInput);}},{key:\"render\",value:function render(){return React.createElement(\"div\",{style:{width:this.props.imagewidth,backgroundColor:this.props.colorPalette.LightGray,height:\"20px\",borderRadius:\"0px\"},className:\"backgroundSlider\"},React.createElement(\"div\",{style:{// width\n// ex: 25 out of 50 frames tracked 25/50 = 0.5\n// in perc: 0.5*100= 50%\nwidth:this.props.max_tracked/this.props.num_imgs*100+'%',backgroundColor:\"#A9A9A9\",height:\"20px\",top:\"0px\",position:\"relative\"},className:\"trackedSlider\"}),React.createElement(\"div\",{style:{backgroundColor:this.props.colorPalette.RoyalBlue,height:\"20px\",borderRadius:\"0px\",position:\"relative\",top:\"-20px\",// width\n// ex: 25 out of 50 frames 25/50 = 0.5\n// in perc: 0.5*100= 50%\nwidth:this.props.value/this.props.num_imgs*100+\"%\"},className:\"selectedSlider\"}),React.createElement(\"div\",{id:\"Thumb\",className:\"Thumb\",style:{left:(this.props.value-1)*(this.props.imagewidth/this.props.num_imgs),backgroundColor:this.props.colorPalette.LightSalmon},onMouseDown:this.props.handleSliderInput,onMouseUp:this.props.handleSliderInput},React.createElement(\"p\",{style:{align:\"center\",textAlign:\"center\",verticalAlign:\"middle\",top:\"25px\",position:\"relative\"}},this.props.value)));}}]);return Slider;}(React.Component);export default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","setFrameNo","value","offsetX","state","xPos","new_left","Math","max","min_value","newFrameNumber","ceil","imagewidth","max_value","min","max_tracked","selectedFrameNumber","findDOMNode","addEventListener","document","width","backgroundColor","colorPalette","LightGray","height","borderRadius","num_imgs","top","position","RoyalBlue","left","LightSalmon","align","textAlign","verticalAlign","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n\r\n    // enter -> move to next frame number but do not overwrite bboxes if they exist (not [0000])\r\n    // tracker -> extend maxtracked, overwrite following bboxes\r\n\r\n    // new example vid (pedestrian from http://www.votchallenge.net/vot2018/dataset.html)\r\n\r\n    // scale image / bbox by some factor\r\n\r\n    // add explanation bubbles (tracker btn-run until fail, correct bbox, vid source, tracking in progress)\r\n\r\n    //finally: upload to azure (install cv2)\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      console.log(this.props)\r\n      this.state = {\r\n        startPosX: 0, \r\n        offsetX: 0,\r\n        dragModeOn: false,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n\r\n        } else if (event.type === \"mouseup\"){ \r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            this.props.setFrameNo(this.props.value) //run tracker changes this to maxtracked\r\n            this.setState({\r\n                offsetX: event.pageX - this.state.startPosX,\r\n                dragModeOn: false,\r\n              });\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            //convert framenumber to position on slider .. \r\n            // slider is either set manually or through pressing enter/tracking\r\n            // set to frame number\r\n\r\n            if (this.state.dragModeOn === true){\r\n\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n                var newFrameNumber = Math.ceil((new_left/this.props.imagewidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n\r\n                this.setState({\r\n                    offsetX:  xPos - this.state.startPosX,\r\n                    selectedFrameNumber: newFrameNumber,\r\n                }); \r\n                this.props.setFrameNo(newFrameNumber)\r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n\r\n      return(\r\n        <div style = {{\r\n            width: this.props.imagewidth,\r\n            backgroundColor: this.props.colorPalette.LightGray,\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n        }} \r\n        className=\"backgroundSlider\">\r\n\r\n        <div style = {{\r\n            // width\r\n            // ex: 25 out of 50 frames tracked 25/50 = 0.5\r\n            // in perc: 0.5*100= 50%\r\n            width: ((this.props.max_tracked)/this.props.num_imgs)*100 + '%', \r\n            backgroundColor:\"#A9A9A9\", \r\n            height:\"20px\", \r\n            top: \"0px\", \r\n            position: \"relative\"}} \r\n        className=\"trackedSlider\"/>\r\n            \r\n        <div style = {{\r\n            backgroundColor: this.props.colorPalette.RoyalBlue,\r\n            height: \"20px\",\r\n            borderRadius: \"0px\",\r\n            position: \"relative\",\r\n            top: \"-20px\",\r\n            // width\r\n            // ex: 25 out of 50 frames 25/50 = 0.5\r\n            // in perc: 0.5*100= 50%\r\n            width: ((this.props.value)/this.props.num_imgs)*100 +\"%\",   \r\n            }} \r\n        className=\"selectedSlider\"/>\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {{\r\n            left: (this.props.value - 1) * (this.props.imagewidth/this.props.num_imgs), \r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        }\r\n        } onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p style = {{\r\n                align:\"center\", \r\n                textAlign: \"center\", \r\n                verticalAlign: \"middle\",\r\n                top: \"25px\", \r\n                position: \"relative\",\r\n                }}>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}