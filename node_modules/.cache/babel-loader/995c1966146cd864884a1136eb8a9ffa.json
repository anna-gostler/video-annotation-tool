{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //todo\n  // max selectable val: max tracked (general: skip over frames /wo move)\n  // color selected bar, tracked/marked bar\n  // move only if clicked\n  // enter -> move slider\n  //instant update\n  //impl left right arrows to slide\n  //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n      } else if (event.type === \"mouseup\") {\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n\n        console.log(this.state.selectedFrameNumber);\n        this.props.setFrameNo(this.state.selectedFrameNumber);\n        this.setState({\n          offsetX: this.state.startPosX - this.state.xPos,\n          dragModeOn: false\n        });\n      } else if (event.type === \"mousemove\") {\n        //on move: register offset from start pos\n        // set thumb position\n        if (this.state.dragModeOn === true) {\n          //var sliderX = ReactDOM.findDOMNode(this).offsetLeft;//.getBoundingClientRect();\n          //console.log(rect.top, rect.right, rect.bottom, rect.left);\n          var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n          var xPos = event.pageX;\n          var new_left = xPos - 100;\n          new_left = Math.max(this.props.min_value, new_left);\n          new_left = Math.min(sliderWidth, new_left);\n          this.setState({\n            offsetX: this.state.startPosX - this.state.xPos,\n            thumbStyle: {\n              left: new_left // 100 is left of FrameArea\n\n            }\n          });\n          this.setState({\n            selectedFrameNumber: Math.ceil(this.state.thumbStyle.left / sliderWidth * this.props.max_value),\n            trackedStyle: {\n              backgroundColor: \"light-blue\",\n              width: this.state.thumbStyle.left / sliderWidth + \"%\",\n              height: \"20px\"\n            }\n          });\n          this.props.setFrameNo(Math.ceil(this.state.thumbStyle.left / sliderWidth * this.props.max_value));\n        }\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      selectedFrameNumber: this.props.value,\n      //Todo remove?\n      selectedStyle: {\n        backgroundColor: \"blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      bgStyle: {\n        backgroundColor: \"#dedede\",\n        // light gray\n        height: \"20px\",\n        borderRadius: \"10px\"\n      },\n      trackedStyle: {\n        backgroundColor: \"light-blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      thumbStyle: {\n        left: \"0px\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: this.state.selectedStyle,\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: this.state.trackedStyle,\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.selectedFrameNumber), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, 'val ' + this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","state","selectedFrameNumber","setFrameNo","offsetX","xPos","sliderWidth","findDOMNode","offsetWidth","new_left","Math","max","min_value","min","thumbStyle","left","ceil","max_value","trackedStyle","backgroundColor","width","height","undefined","value","selectedStyle","bgStyle","borderRadius","componentDidMount","addEventListener","document","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //todo\r\n    // max selectable val: max tracked (general: skip over frames /wo move)\r\n    // color selected bar, tracked/marked bar\r\n    // move only if clicked\r\n    // enter -> move slider\r\n    //instant update\r\n    //impl left right arrows to slide\r\n\r\n    //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        selectedFrameNumber: this.props.value, //Todo remove?\r\n        selectedStyle: {\r\n          backgroundColor: \"blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: \"#dedede\", // light gray\r\n          height: \"20px\",\r\n          borderRadius: \"10px\",\r\n        },\r\n        trackedStyle: {\r\n          backgroundColor: \"light-blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n        },\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n        } else if (event.type === \"mouseup\"){\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            console.log(this.state.selectedFrameNumber)\r\n            this.props.setFrameNo(this.state.selectedFrameNumber)\r\n            this.setState({\r\n                offsetX: this.state.startPosX - this.state.xPos,\r\n                dragModeOn: false,\r\n              });\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            //on move: register offset from start pos\r\n            // set thumb position\r\n\r\n            if (this.state.dragModeOn === true){\r\n                //var sliderX = ReactDOM.findDOMNode(this).offsetLeft;//.getBoundingClientRect();\r\n                //console.log(rect.top, rect.right, rect.bottom, rect.left);\r\n                var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100;\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n                new_left = Math.min(sliderWidth, new_left)\r\n\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n                    thumbStyle: {\r\n                        left: new_left, // 100 is left of FrameArea\r\n                    },\r\n                  });\r\n\r\n                \r\n                 this.setState({\r\n                    selectedFrameNumber: Math.ceil((this.state.thumbStyle.left/sliderWidth) * this.props.max_value),\r\n                    trackedStyle: {\r\n                        backgroundColor: \"light-blue\",\r\n                        width: (this.state.thumbStyle.left/sliderWidth) + \"%\",\r\n                        height: \"20px\",\r\n                      },\r\n                 }); \r\n\r\n\r\n\r\n                 this.props.setFrameNo(Math.ceil((this.state.thumbStyle.left/sliderWidth) * this.props.max_value))\r\n\r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle} className=\"backgroundSlider\">\r\n        <div style = {this.state.selectedStyle} className=\"selectedSlider\"/>\r\n        <div style = {this.state.trackedStyle} className=\"trackedSlider\"/>\r\n\r\n          <div id=\"Thumb\" className=\"Thumb\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p>{this.state.selectedFrameNumber}</p>\r\n            <p>{'val ' + this.props.value}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}