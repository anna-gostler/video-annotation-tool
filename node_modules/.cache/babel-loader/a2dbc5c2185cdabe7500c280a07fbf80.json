{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n      } else if (event.type === \"mouseup\") {\n        //update frame no depending on offset\n        var sliderWidth = ReactDOM.findDOMNode(this).getElementsByClassName('slidecontainer')[0].offsetWidth; // - 25;\n\n        var one_slider_unit = sliderWidth / 100; //convert pixel offset to slider value\n\n        this.props.value;\n        this.props.setFrameNo(frameno);\n      } else if (event.type === \"mousemove\") {\n        //on move: register offset from start pos\n        // set thumb position\n        if (this.state.dragModeOn === true) {\n          var xPos = event.pageX;\n          this.setState({\n            offsetX: startPosX - xPos\n          });\n        } // 1. change framenumber\n        // 2. update image\n        //console.log('event.target.value = ' + clickPosX)\n        //console.log('sliderWidth = ' + sliderWidth)\n        //console.log(\"(sliderWidth/100) = \" + (sliderWidth/100))\n        //console.log(\"Math.max(event.target.value-3,2) = \" +  Math.max(clickPosX-3,2))\n        //console.log(\"result = \" + ((sliderWidth/100) * Math.max(clickPosX-3,2)) + \"px\")\n\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      selectedStyle: {\n        backgroundColor: \"blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      bgStyle: {\n        backgroundColor: \"#dedede\",\n        // light gray\n        width: \"100%\",\n        height: \"20px\"\n      },\n      trackedStyle: {\n        backgroundColor: \"light-blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      thumbStyle: {\n        left: \"0px\"\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"slidecontainer\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.frameNumber)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","type","setState","startPosX","pageX","dragModeOn","sliderWidth","findDOMNode","getElementsByClassName","offsetWidth","one_slider_unit","value","setFrameNo","frameno","state","xPos","offsetX","undefined","selectedStyle","backgroundColor","width","height","bgStyle","trackedStyle","thumbStyle","left","render","frameNumber"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AAEjC;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA2BnBC,iBA3BmB,GA2BEC,KAAD,IAAW;AAE3B,UAAIA,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAC7B,aAAKC,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAEH,KAAK,CAACI,KADL;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAAd;AAID,OALD,MAKO,IAAIL,KAAK,CAACC,IAAN,KAAe,SAAnB,EAA6B;AAChC;AAEA,YAAIK,WAAW,GAAIZ,QAAQ,CAACa,WAAT,CAAqB,IAArB,EAA2BC,sBAA3B,CAAkD,gBAAlD,EAAoE,CAApE,EAAuEC,WAA1F,CAHgC,CAGsE;;AACtG,YAAIC,eAAe,GAAIJ,WAAW,GAAC,GAAnC,CAJgC,CAMhC;;AACA,aAAKR,KAAL,CAAWa,KAAX;AACA,aAAKb,KAAL,CAAWc,UAAX,CAAsBC,OAAtB;AAEH,OAVM,MAUA,IAAIb,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAClC;AACA;AAEA,YAAI,KAAKa,KAAL,CAAWT,UAAX,KAA0B,IAA9B,EAAmC;AAC/B,cAAIU,IAAI,GAAGf,KAAK,CAACI,KAAjB;AACA,eAAKF,QAAL,CAAc;AACVc,YAAAA,OAAO,EAAEb,SAAS,GAAGY;AADX,WAAd;AAGH,SATiC,CAYpC;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF,KAhEgB;;AAEjB,SAAKD,KAAL,GAAa;AACXX,MAAAA,SAAS,EAAEc,SADA;AAEXD,MAAAA,OAAO,EAAEC,SAFE;AAGXZ,MAAAA,UAAU,EAAE,KAHD;AAIXa,MAAAA,aAAa,EAAE;AACbC,QAAAA,eAAe,EAAE,MADJ;AAEbC,QAAAA,KAAK,EAAE,IAFM;AAGbC,QAAAA,MAAM,EAAE;AAHK,OAJJ;AASXC,MAAAA,OAAO,EAAE;AACPH,QAAAA,eAAe,EAAE,SADV;AACqB;AAC5BC,QAAAA,KAAK,EAAE,MAFA;AAGPC,QAAAA,MAAM,EAAE;AAHD,OATE;AAcXE,MAAAA,YAAY,EAAE;AACZJ,QAAAA,eAAe,EAAE,YADL;AAEZC,QAAAA,KAAK,EAAE,IAFK;AAGZC,QAAAA,MAAM,EAAE;AAHI,OAdH;AAmBXG,MAAAA,UAAU,EAAE;AACRC,QAAAA,IAAI,EAAE;AADE;AAnBD,KAAb;AAuBD;;AAyCDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAI,KAAKZ,KAAL,CAAWQ,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,SAAS,EAAC,gBAA1B;AAA2C,MAAA,KAAK,EAAI,KAAKR,KAAL,CAAWU,UAA/D;AAA2E,MAAA,WAAW,EAAI,KAAK1B,KAAL,CAAWC,iBAArG;AAAwH,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAWC,iBAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKe,KAAL,CAAWa,WAAf,CADF,CADF,CADF;AAOD;;AA9EgC;;AAiFnC,eAAehC,MAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        selectedStyle: {\r\n          backgroundColor: \"blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: \"#dedede\", // light gray\r\n          width: \"100%\",\r\n          height: \"20px\",\r\n        },\r\n        trackedStyle: {\r\n          backgroundColor: \"light-blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n        },\r\n      };\r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n        } else if (event.type === \"mouseup\"){\r\n            //update frame no depending on offset\r\n\r\n            var sliderWidth =  ReactDOM.findDOMNode(this).getElementsByClassName('slidecontainer')[0].offsetWidth;// - 25;\r\n            var one_slider_unit = (sliderWidth/100)\r\n\r\n            //convert pixel offset to slider value\r\n            this.props.value\r\n            this.props.setFrameNo(frameno)\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            //on move: register offset from start pos\r\n            // set thumb position\r\n\r\n            if (this.state.dragModeOn === true){\r\n                var xPos = event.pageX;\r\n                this.setState({\r\n                    offsetX: startPosX - xPos,\r\n                  });\r\n            }\r\n\r\n    \r\n          // 1. change framenumber\r\n          // 2. update image\r\n          //console.log('event.target.value = ' + clickPosX)\r\n          //console.log('sliderWidth = ' + sliderWidth)\r\n          //console.log(\"(sliderWidth/100) = \" + (sliderWidth/100))\r\n          //console.log(\"Math.max(event.target.value-3,2) = \" +  Math.max(clickPosX-3,2))\r\n          //console.log(\"result = \" + ((sliderWidth/100) * Math.max(clickPosX-3,2)) + \"px\")\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle}>\r\n          <div id=\"Thumb\" className=\"slidecontainer\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p>{this.state.frameNumber}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}