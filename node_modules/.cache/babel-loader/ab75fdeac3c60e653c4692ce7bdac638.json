{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //todo\n  // max selectable val: max tracked (general: skip over frames /wo move)\n  // color selected bar, tracked/marked bar\n  // move only if clicked\n  // enter -> move slider\n  //instant update\n  //impl left right arrows to slide\n  //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\n  constructor(props) {\n    super(props);\n\n    this.handleSliderInput = event => {\n      console.log('handleSliderInput this.props.max_tracked ' + this.props.max_tracked);\n\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n        document.addEventListener('mousemove', this.handleSliderInput);\n      } else if (event.type === \"mouseup\") {\n        console.log('slider mouseup'); //update frameno depending on offset\n        //convert pixel offset to slider value\n\n        console.log(this.state.selectedFrameNumber);\n        this.props.setFrameNo(this.state.selectedFrameNumber);\n        this.setState({\n          offsetX: this.state.startPosX - this.state.xPos,\n          dragModeOn: false\n        });\n        document.removeEventListener('mousemove', this.handleSliderInput);\n      } else if (event.type === \"mousemove\") {\n        // on move: register offset from start pos\n        // allow slide only to already tracked/manually marked frames\n        if (this.state.dragModeOn === true) {\n          var sliderWidth = ReactDOM.findDOMNode(this).offsetWidth - 25;\n          var xPos = event.pageX;\n          var new_left = xPos - 100; // 100 is left of FrameArea\n\n          new_left = Math.max(this.props.min_value, new_left);\n          var newFrameNumber = Math.ceil(new_left / sliderWidth * this.props.max_value);\n          newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked);\n          console.log(this.props.max_tracked);\n          new_left = Math.min(this.props.max_tracked, new_left);\n          this.setState({\n            offsetX: this.state.startPosX - this.state.xPos,\n            thumbStyle: {\n              left: new_left,\n              backgroundColor: this.props.colorPalette.LightSalmon\n            }\n          });\n          this.setState({\n            selectedFrameNumber: newFrameNumber,\n            selectedStyle: {\n              backgroundColor: \"light-blue\",\n              width: newFrameNumber + \"%\",\n              height: \"20px\",\n              borderRadius: \"0px\"\n            }\n          });\n          this.props.setFrameNo(newFrameNumber);\n        }\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      selectedFrameNumber: this.props.value,\n      selectedStyle: {\n        backgroundColor: this.props.colorPalette.RoyalBlue,\n        width: this.props.value + \"%\",\n        height: \"20px\",\n        borderRadius: \"0px\"\n      },\n      bgStyle: {\n        backgroundColor: this.props.colorPalette.LightGray,\n        // light gray\n        height: \"20px\",\n        borderRadius: \"0px\"\n      },\n      thumbStyle: {\n        left: \"0px\",\n        backgroundColor: this.props.colorPalette.LightSalmon\n      }\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput);\n    document.addEventListener('mousemove', this.handleSliderInput);\n    document.addEventListener('mouseup', this.handleSliderInput);\n  }\n\n  render() {\n    console.log('render ' + this.props.max_tracked);\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      className: \"backgroundSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: this.state.selectedStyle,\n      className: \"selectedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: this.props.max_tracked + '%',\n        backgroundColor: this.props.colorPalette.BleuDeFrance,\n        height: \"25px\"\n      },\n      className: \"trackedSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"Thumb\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.props.value)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","handleSliderInput","event","console","log","max_tracked","type","setState","startPosX","pageX","dragModeOn","document","addEventListener","state","selectedFrameNumber","setFrameNo","offsetX","xPos","removeEventListener","sliderWidth","findDOMNode","offsetWidth","new_left","Math","max","min_value","newFrameNumber","ceil","max_value","min","thumbStyle","left","backgroundColor","colorPalette","LightSalmon","selectedStyle","width","height","borderRadius","undefined","value","RoyalBlue","bgStyle","LightGray","componentDidMount","render","BleuDeFrance"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //todo\r\n    // max selectable val: max tracked (general: skip over frames /wo move)\r\n    // color selected bar, tracked/marked bar\r\n    // move only if clicked\r\n    // enter -> move slider\r\n    //instant update\r\n    //impl left right arrows to slide\r\n\r\n    //<Slider max_value={this.state.num_imgs} max_tracked = {this.state.maxFrameNumber}  min_value = {1} value={this.state.frameNumber} setFrameNo = {this.setFrameNo} colorPalette = {this.state.colorPalette}/>\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        selectedFrameNumber: this.props.value, \r\n        selectedStyle: {\r\n          backgroundColor: this.props.colorPalette.RoyalBlue,\r\n          width: this.props.value +\"%\",\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: this.props.colorPalette.LightGray, // light gray\r\n          height: \"20px\",\r\n          borderRadius: \"0px\",\r\n        },\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n            backgroundColor: this.props.colorPalette.LightSalmon,\r\n        },\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount() {\r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleSliderInput); \r\n        document.addEventListener('mousemove', this.handleSliderInput); \r\n        document.addEventListener('mouseup', this.handleSliderInput); \r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n        console.log('handleSliderInput this.props.max_tracked ' + this.props.max_tracked)\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n          document.addEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mouseup\"){\r\n            console.log('slider mouseup')\r\n\r\n            //update frameno depending on offset\r\n            //convert pixel offset to slider value\r\n            console.log(this.state.selectedFrameNumber)\r\n            this.props.setFrameNo(this.state.selectedFrameNumber)\r\n            this.setState({\r\n                offsetX: this.state.startPosX - this.state.xPos,\r\n                dragModeOn: false,\r\n              });\r\n              document.removeEventListener('mousemove', this.handleSliderInput); \r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            // on move: register offset from start pos\r\n            // allow slide only to already tracked/manually marked frames\r\n\r\n            if (this.state.dragModeOn === true){\r\n                var sliderWidth =  ReactDOM.findDOMNode(this).offsetWidth - 25;\r\n                var xPos = event.pageX;\r\n                var new_left = xPos - 100; // 100 is left of FrameArea\r\n                new_left = Math.max(this.props.min_value, new_left)\r\n\r\n                var newFrameNumber = Math.ceil((new_left/sliderWidth) * this.props.max_value);\r\n                newFrameNumber = Math.min(newFrameNumber, this.props.max_tracked)\r\n                console.log(this.props.max_tracked)\r\n                new_left = Math.min(this.props.max_tracked, new_left)\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n                    thumbStyle: {\r\n                        left: new_left, \r\n                        backgroundColor: this.props.colorPalette.LightSalmon,\r\n                    },\r\n                    });\r\n\r\n                \r\n                    this.setState({\r\n                    selectedFrameNumber: newFrameNumber,\r\n                    selectedStyle: {\r\n                        backgroundColor: \"light-blue\",\r\n                        width: newFrameNumber +\"%\",\r\n                        height: \"20px\",\r\n                        borderRadius: \"0px\",\r\n                        },\r\n                    }); \r\n                    this.props.setFrameNo(newFrameNumber)\r\n                \r\n            }\r\n        }\r\n      }\r\n  \r\n    render() {\r\n    console.log('render '+ this.props.max_tracked)\r\n      return(\r\n        <div style = {this.state.bgStyle} className=\"backgroundSlider\">\r\n        <div style = {this.state.selectedStyle} className=\"selectedSlider\"/>\r\n        <div style = {{width: this.props.max_tracked + '%', backgroundColor:this.props.colorPalette.BleuDeFrance, height:\"25px\"}} className=\"trackedSlider\"/>\r\n\r\n        <div id=\"Thumb\" className=\"Thumb\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p>{this.props.value}</p>\r\n        </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}