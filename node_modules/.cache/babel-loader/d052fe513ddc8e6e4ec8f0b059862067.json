{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anna_\\\\azuretest\\\\annotation-tool\\\\src\\\\Slider.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Slider extends React.Component {\n  //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleMouseDown);\n      ReactDOM.findDOMNode(this).addEventListener('mousemove', this.handleDrag);\n    };\n\n    this.handleSliderInput = event => {\n      if (event.type === \"mousedown\") {\n        console.log('slider mousedown');\n        this.setState({\n          startPosX: event.pageX,\n          dragModeOn: true\n        });\n      } else if (event.type === \"mouseup\") {\n        console.log('slider mouseup'); //update frame no depending on offset\n\n        var sliderWidth = ReactDOM.findDOMNode(this).getElementsByClassName('slidecontainer')[0].offsetWidth; // - 25;\n\n        var one_slider_unit = sliderWidth / 100; //convert pixel offset to slider value\n        //this.props.value\n        //this.props.setFrameNo(frameno)\n      } else if (event.type === \"mousemove\") {\n        console.log('slider mousemove'); //on move: register offset from start pos\n        // set thumb position\n\n        if (this.state.dragModeOn === true) {\n          var xPos = event.pageX;\n          this.setState({\n            offsetX: this.state.startPosX - this.state.xPos,\n            thumbStyle: {\n              left: xPos\n            }\n          });\n        } // 1. change framenumber\n        // 2. update image\n        //console.log('event.target.value = ' + clickPosX)\n        //console.log('sliderWidth = ' + sliderWidth)\n        //console.log(\"(sliderWidth/100) = \" + (sliderWidth/100))\n        //console.log(\"Math.max(event.target.value-3,2) = \" +  Math.max(clickPosX-3,2))\n        //console.log(\"result = \" + ((sliderWidth/100) * Math.max(clickPosX-3,2)) + \"px\")\n\n      }\n    };\n\n    this.state = {\n      startPosX: undefined,\n      offsetX: undefined,\n      dragModeOn: false,\n      selectedStyle: {\n        backgroundColor: \"blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      bgStyle: {\n        backgroundColor: \"#dedede\",\n        // light gray\n        width: \"100%\",\n        height: \"20px\"\n      },\n      trackedStyle: {\n        backgroundColor: \"light-blue\",\n        width: \"0%\",\n        height: \"20px\"\n      },\n      thumbStyle: {\n        left: \"0px\"\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.state.bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"Thumb\",\n      className: \"slidecontainer\",\n      style: this.state.thumbStyle,\n      onMouseDown: this.props.handleSliderInput,\n      onMouseUp: this.props.handleSliderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.frameNumber)));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["C:/Users/anna_/azuretest/annotation-tool/src/Slider.jsx"],"names":["React","ReactDOM","Slider","Component","constructor","props","componentDidMount","findDOMNode","addEventListener","handleMouseDown","handleDrag","handleSliderInput","event","type","console","log","setState","startPosX","pageX","dragModeOn","sliderWidth","getElementsByClassName","offsetWidth","one_slider_unit","state","xPos","offsetX","thumbStyle","left","undefined","selectedStyle","backgroundColor","width","height","bgStyle","trackedStyle","render","frameNumber"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    //<Slider max_value={this.state.maxFrameNumber} max_tracked = {this.state.max_tracked}  min_value = {1} value={this.state.frameNumber} />\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startPosX: undefined, \r\n        offsetX: undefined,\r\n        dragModeOn: false,\r\n        selectedStyle: {\r\n          backgroundColor: \"blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        bgStyle: {\r\n          backgroundColor: \"#dedede\", // light gray\r\n          width: \"100%\",\r\n          height: \"20px\",\r\n        },\r\n        trackedStyle: {\r\n          backgroundColor: \"light-blue\",\r\n          width: \"0%\",\r\n          height: \"20px\",\r\n        },\r\n        thumbStyle: {\r\n            left: \"0px\",\r\n        },\r\n      };\r\n    }\r\n\r\n      \r\n    componentDidMount = () => {\r\n  \r\n        ReactDOM.findDOMNode(this).addEventListener('mousedown', this.handleMouseDown); \r\n        ReactDOM.findDOMNode(this).addEventListener('mousemove', this.handleDrag); \r\n    }\r\n\r\n    handleSliderInput = (event) => {\r\n\r\n        if (event.type === \"mousedown\"){\r\n            console.log('slider mousedown')\r\n          this.setState({\r\n            startPosX: event.pageX,\r\n            dragModeOn: true,\r\n          });\r\n        } else if (event.type === \"mouseup\"){\r\n            console.log('slider mouseup')\r\n\r\n            //update frame no depending on offset\r\n\r\n            var sliderWidth =  ReactDOM.findDOMNode(this).getElementsByClassName('slidecontainer')[0].offsetWidth;// - 25;\r\n            var one_slider_unit = (sliderWidth/100);\r\n\r\n            //convert pixel offset to slider value\r\n            //this.props.value\r\n            //this.props.setFrameNo(frameno)\r\n\r\n        } else if (event.type === \"mousemove\"){\r\n            console.log('slider mousemove')\r\n            //on move: register offset from start pos\r\n            // set thumb position\r\n\r\n            if (this.state.dragModeOn === true){\r\n                var xPos = event.pageX;\r\n                this.setState({\r\n                    offsetX: this.state.startPosX - this.state.xPos,\r\n                    thumbStyle: {\r\n                        left: xPos,\r\n                    },\r\n                  });\r\n            }\r\n\r\n    \r\n          // 1. change framenumber\r\n          // 2. update image\r\n          //console.log('event.target.value = ' + clickPosX)\r\n          //console.log('sliderWidth = ' + sliderWidth)\r\n          //console.log(\"(sliderWidth/100) = \" + (sliderWidth/100))\r\n          //console.log(\"Math.max(event.target.value-3,2) = \" +  Math.max(clickPosX-3,2))\r\n          //console.log(\"result = \" + ((sliderWidth/100) * Math.max(clickPosX-3,2)) + \"px\")\r\n        }\r\n      }\r\n  \r\n    render() {\r\n      return(\r\n        <div style = {this.state.bgStyle}>\r\n          <div id=\"Thumb\" className=\"slidecontainer\" style = {this.state.thumbStyle} onMouseDown = {this.props.handleSliderInput} onMouseUp = {this.props.handleSliderInput}>\r\n            <p>{this.state.frameNumber}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Slider;"]},"metadata":{},"sourceType":"module"}